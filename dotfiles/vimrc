"""""""""""""
" My .vimrc "
"""""""""""""
" Very much inspired by: https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/

"""" VUNDLE SETUP
set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Add all your plugins here (note older versions of Vundle used Bundle
" instead of Plugin)
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
Bundle 'Valloric/YouCompleteMe'
Plugin 'scrooloose/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'tpope/vim-commentary'
Plugin 'terryma/vim-expand-region'
"Plugin 'vim-airline/vim-airline'
"Plugin 'roxma/nvim-yarp'
"Plugin 'roxma/vim-hug-neovim-rpc'
"Plugin 'Shougo/deoplete.nvim'
Plugin 'Shougo/neocomplete.vim'

" ELIXIR
Plugin 'elixir-editors/vim-elixir'
Plugin 'slashmili/alchemist.vim'
Plugin 'vim-scripts/conque-shell'

" HASKELL
Plugin 'eagletmt/ghcmod-vim'
Plugin 'Shougo/vimproc.vim'
Plugin 'itchyny/vim-haskell-indent'
Plugin 'eagletmt/neco-ghc'
Plugin 'neovimhaskell/haskell-vim'
Plugin 'nbouscal/vim-stylish-haskell'
Plugin 'bitc/vim-hdevtools'
Plugin 'dag/vim2hs'

" RUST
Plugin 'rust-lang/rust.vim'
Plugin 'racer-rust/vim-racer'

" COLOURS
Plugin 'morhetz/gruvbox'
"

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
"
let mapleader = "\<space>"

" Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" neco-ghc
let g:necoghc_enable_detailed_browse = 1

"""" VISUAL STUFF
" set colorscheme
"colorscheme herald

colorscheme gruvbox
set background=dark
let g:gruvbox_contrast_dark = "hard"
let g:gruvbox_contrast_light = "hard"

" Folded highlight looks to similar to cursor line highlight, manually changing
autocmd ColorScheme gruvbox hi FoldColumn ctermbg=234 ctermfg=29 cterm=none
autocmd ColorScheme gruvbox hi Folded     ctermbg=234 ctermfg=29 cterm=none 


" use syntax processing
syntax enable
" use filetype plugins
filetype plugin on
filetype indent on
" show line numbers
set number
" show latest command
set showcmd 
" highlight line/column under cursor
set cursorline
"set cursorcolumn
" show tab-completion matches
set wildmenu
" highlight matching braces (kind of annoying with blinking cursor)
set showmatch
" (to turn off) let g:loaded_matchparen=1
" display current position
set ruler
" always show status line
set laststatus=2
" format the status line
"set statusline=%F\ %y\ cwd:%{getcwd()}\ %l\,%v\ %P
set statusline=%F\ %y\ %l\,%v\ %P
"use line wrapping
set wrap

let python_highlight_all=1
syntax on

" true colour terminal
"set termguicolors
""""

"""" FILE FORMAT, ENCODING
" make unix default file type
set ffs=unix,dos,mac
" use utf8 encoding
set encoding=utf8
""""

"""" SPACES, TABS, INDENTING
" set default shift and tab width to 4 spaces
set shiftwidth=4
set tabstop=4
" convert tabs to spaces
set expandtab
" use smart tabbing
set smarttab
" use automatic indenting
set autoindent
" use smart indenting
set smartindent
" make backspace work properly
set backspace=2
"set backspace=eol,indent,start
""""

"""" SEARCHING
" highlight search matches
set hlsearch
" search while typing
set incsearch
" pattern is case-sensitive only if it includes uppercase
set ignorecase
set smartcase
"use magic for regex
set magic
""""

"""" FOLDING
" enable folding
set foldenable
" set initial fold level
set foldlevel=0
" set maximum number of nested folds
set foldnestmax=10
" set fold method
set foldmethod=indent
""""

"""" SYSTEM
" detect changes made externally
set autoread
"don't automatically create backup files
set nobackup
set noswapfile
set nowritebackup
""""

"""" ERRORS
"turn off error bells
set noerrorbells
set novisualbell
set t_vb=
""""

"""" MISC
" disable auto-commenting
"autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM-LATEX
"
" REQUIRED. This makes vim invoke Latex-Suite when you open a tex file.
filetype plugin on

" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
set shellslash

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: This enables automatic indentation as you type.
filetype indent on

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

"set default target format to pdf
let g:Tex_DefaultTargetFormat='pdf'
"let g:Tex_CompileRule_pdf='pdflatex -interaction=nonstopmode $*'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""" Pydiction
let g:pydiction_location = '/home/paultan/src/rkulla-pydiction-41c7143/complete-dict'

"""" SimpylFold
" Show docstrings for folded code
let g:SimpylFold_docstring_preview=1

"""" YouCompleteMe
" Hide autocomplete window when done
let g:ycm_autoclose_preview_window_after_completion=1
" Shortcut for goto definition
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
"map <leader>gt  :YcmCompleter GoTo<CR>
"map <leader>g :YcmCompleter GetDoc<CR>

let g:ycm_server_python_interpreter = 'python'

"python with virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF

"""" nerdtree
" ignore *.pyc
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree


" ===================================================================
" neocomplete
" Disable YCM for haskell
let g:ycm_filetype_blacklist = { 'haskell': 1 }

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" Enable omni completion.
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

" RACER ===================================================
" it's worth turning on 'hidden' mode for buffers otherwise you need to save
" the current buffer every time you do a goto-definition
set hidden
let g:racer_cmd = "/home/paultan/bin/racer"
" Full function definition
let g:racer_experimental_completer = 1
