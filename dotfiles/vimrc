"======== Vundle ========

set nocompatible
filetype off

" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle itself
Plugin 'gmarik/Vundle.vim'

" Filesystem view
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'

" Statusline
Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
"Plugin 'vim-airline/vim-airline'

" Search
Plugin 'kien/ctrlp.vim'
Plugin 'jremmen/vim-ripgrep'
Plugin 'wincent/ferret'

" Commenting
Plugin 'tpope/vim-commentary'

" Code completion
Bundle 'Valloric/YouCompleteMe'
Plugin 'Shougo/neocomplete.vim'
"Plugin 'Shougo/deoplete.nvim'

" Syntax checking
Plugin 'scrooloose/syntastic'

" Linting
"Plugin 'nvie/vim-flake8'

" Git
Plugin 'tpope/vim-fugitive'

" Visual selection
Plugin 'terryma/vim-expand-region'

" Autoformatting
Plugin 'Chiel92/vim-autoformat'
noremap <F3> :Autoformat<CR>

" MARKDOWN
Plugin 'suan/vim-instant-markdown'

" PYTHON
Plugin 'vim-scripts/indentpython.vim'
Plugin 'tmhedberg/SimpylFold'

" ELIXIR
Plugin 'elixir-editors/vim-elixir'
Plugin 'slashmili/alchemist.vim'
Plugin 'vim-scripts/conque-shell'
Plugin 'mhinz/vim-mix-format'

" HASKELL
Plugin 'eagletmt/ghcmod-vim'
Plugin 'Shougo/vimproc.vim'
Plugin 'itchyny/vim-haskell-indent'
Plugin 'eagletmt/neco-ghc'
Plugin 'neovimhaskell/haskell-vim'
Plugin 'nbouscal/vim-stylish-haskell'
Plugin 'bitc/vim-hdevtools'
Plugin 'dag/vim2hs'

" RUST
Plugin 'rust-lang/rust.vim'
Plugin 'racer-rust/vim-racer'

" LATEX
Plugin 'vim-latex/vim-latex'

" VIMWIKI
Plugin 'vimwiki/vimwiki'

" Tables
Plugin 'dhruvasagar/vim-table-mode'

" Basically only use this for Gollum templates
Plugin 'mustache/vim-mustache-handlebars'

" COLOUR SCHEMES
Plugin 'morhetz/gruvbox'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'AlessandroYorba/Alduin'
Plugin 'nightsense/carbonized'
Plugin 'ajmwagar/vim-deus'
Plugin 'dracula/vim'
Plugin 'nanotech/jellybeans.vim'
Plugin 'tyrannicaltoucan/vim-quantum'
Plugin 'joshdick/onedark.vim'
"Plugin 'challenger-deep-theme/vim'

" Buffer viewer
Plugin 'fholgado/minibufexpl.vim'

" All plugins must be added before the following line
call vundle#end()        
filetype plugin indent on
"========

"======== General ========
" Leader for keybindings
let mapleader = "\\"

"---- Syntax highlighting
syntax enable
syntax on

" Enable all syntax highlighting for Python
let python_highlight_all=1
"----

"---- Statusline ----
" Always show
set laststatus=2

" Format statusline
"set statusline=%F\ %y\ cwd:%{getcwd()}\ %l\,%v\ %P
set statusline=%F\ %y\ %l\,%v\ %P
"----

"---- Filetype ----
" Make Unix the default file type
set ffs=unix,dos,mac

set encoding=utf8

filetype plugin on
filetype indent on
"----

"---- Spaces, tabs, indenting ----
" Set default shift and tab width to 4 spaces
set shiftwidth=4
set tabstop=4

" Convert tabs to spaces
set expandtab
set smarttab
set autoindent
set smartindent

" Make backspace work properly
set backspace=2
"set backspace=eol,indent,start
"----

"---- Search
" Highlight search matches
set hlsearch

" Search while typing
set incsearch

" Pattern is case-sensitive only if it includes uppercase
set ignorecase
set smartcase

" Use magic for regex
set magic
"----

"---- Folding
set foldenable

" Initial fold level
set foldlevel=99

set foldnestmax=10
set foldmethod=indent
"----

"---- System
" Detect changes made externally
set autoread
" Don't automatically create backup files
set nobackup
set noswapfile
set nowritebackup
"----

"---- Miscellany ----
" Line wrapping
set wrap

" Line numbers
set number

" Highlight line/column under cursor
set cursorline
"set cursorcolumn

" Display current position
set ruler

" Omni completion
set omnifunc=syntaxcomplete#Complete

" Show latest command
set showcmd

" Show tab-completion matches
set wildmenu

" Highlight matching braces (kind of annoying when using blinking cursor)
set showmatch
" To turn this off: let g:loaded_matchparen=1

" Disable auto-commenting on new line following a comment
"autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
"----

"========

"======== Color scheme ========
colorscheme onedark

set background=dark
"set background=light

" True colour terminal (currently using urxvt which doesn't support)
"set termguicolors

"---- Gruvbox settings
let g:gruvbox_contrast_dark = "hard"
let g:gruvbox_contrast_light = "hard"
" Folded highlight looks to similar to cursor line highlight, manually change it
autocmd ColorScheme gruvbox hi FoldColumn ctermbg=234 ctermfg=29 cterm=none
autocmd ColorScheme gruvbox hi Folded     ctermbg=234 ctermfg=29 cterm=none
"----

" Allow translucency
hi Normal guibg=NONE ctermbg=NONE
"==========

"---- Errors -----
" Turn off error bells, these are just annoying
set noerrorbells
set novisualbell
set t_vb=
"----

"======== Specific plugin settings ========

"---- Pydiction
let g:pydiction_location = '/home/paultan/src/rkulla-pydiction-41c7143/complete-dict'
"----

"---- haskell-vim
" Disable haskell-vim omnifunc
let g:haskellmode_completion_ghc = 0
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
"----

"---- neco-ghc
let g:necoghc_enable_detailed_browse = 1
"----

"---- SimpylFold
" Show docstrings for folded code
let g:SimpylFold_docstring_preview=1
"----

"---- YouCompleteMe
" Hide autocomplete window when done
let g:ycm_autoclose_preview_window_after_completion=1
" Shortcut for goto definition
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
"map <leader>gt  :YcmCompleter GoTo<CR>
"map <leader>g :YcmCompleter GetDoc<CR>

let g:ycm_server_python_interpreter = 'python'

" Python virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF
"----

"---- vim-instant-markdown
let g:instant_markdown_autostart = 0
"----

"---- nerdtree
" ignore *.pyc
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
"----

"---- neocomplete
" Disable YCM for haskell
let g:ycm_filetype_blacklist = { 'haskell': 1 }

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" Enable omni completion.
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
"----

"---- Racer
" it's worth turning on 'hidden' mode for buffers otherwise you need to save
" the current buffer every time you do a goto-definition
set hidden
let g:racer_cmd = "/home/paultan/bin/racer"
" Full function definition
let g:racer_experimental_completer = 1
"----

"---- vimwiki
let g:vimwiki_list = [{
            \ 'path': '~/Documents/_stuff/wiki_gollum',
            \ 'path_html': '~/Documents/_stuff/wiki_gollum/html',
            \ 'index': 'Home',
            \ 'auto_export': 0,
            \ 'auto_toc': 1,
            \ 'max_hi': 1,
            \ 'auto_tags': 1,
            \ 'diary_rel_path': 'diary',
            \ 'diary_index': 'Diary',
            \ 'syntax': 'markdown',
            \ 'ext': '.md',
            \ 'nested_syntaxes': {'python': 'python', 'elixir': 'elixir', 'haskell': 'haskell', 'go': 'go'},
            \ 'template_path': '~/Documents/_stuff/wiki_gollum/templates/',
            \ 'template_default': 'base',
            \ 'template_ext': '.html'}]

let g:vimwiki_hl_headers = 0
let g:vimwiki_hl_cb_checked = 1
let g:vimwiki_ext2syntax = {'.md': 'markdown'}

"map <leader>ll :VimwikiAll2HTML<CR>
map <leader>l :VimwikiSplitLink<CR>
"----

"========
